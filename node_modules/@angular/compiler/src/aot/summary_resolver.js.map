{"version":3,"file":"summary_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/aot/summary_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileDirectiveSummary, CompileIdentifierMetadata, CompileNgModuleSummary, CompilePipeSummary, CompileSummaryKind, CompileTypeMetadata, CompileTypeSummary, identifierModuleUrl, identifierName} from '../compile_metadata';\nimport {SummaryResolver} from '../summary_resolver';\n\nimport {GeneratedFile} from './generated_file';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol} from './static_symbol';\nimport {filterFileByPatterns} from './utils';\n\nconst /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n\nexport interface AotSummaryResolverHost {\n  /**\n   * Loads an NgModule/Directive/Pipe summary file\n   */\n  loadSummary(filePath: string): string;\n\n  /**\n   * Returns the output file path of a source file.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   */\n  getOutputFileName(sourceFilePath: string): string;\n}\n\nexport interface AotSummaryResolverOptions {\n  includeFilePattern?: RegExp;\n  excludeFilePattern?: RegExp;\n}\n\nexport class AotSummaryResolver implements SummaryResolver {\nprivate summaryCache: {[cacheKey: string]: CompileTypeSummary} = {};\n/**\n * @param {?} host\n * @param {?} staticReflector\n * @param {?} options\n */\nconstructor(\nprivate host: AotSummaryResolverHost,\nprivate staticReflector: StaticReflector,\nprivate options: AotSummaryResolverOptions) {}\n/**\n * @param {?} srcFileUrl\n * @param {?} summaries\n * @return {?}\n */\nserializeSummaries(srcFileUrl: string, summaries: CompileTypeSummary[]): GeneratedFile {\n    const /** @type {?} */ jsonReplacer = (key: string, value: any) => {\n      if (value instanceof StaticSymbol) {\n        // We convert the source filenames into output filenames,\n        // as the generated summary file will be used when the current\n        // compilation unit is used as a library\n        return {\n          '__symbolic__': 'symbol',\n          'name': value.name,\n          'path': this.host.getOutputFileName(value.filePath),\n          'members': value.members\n        };\n      }\n      return value;\n    };\n    const /** @type {?} */ allSummaries = summaries.slice();\n    summaries.forEach((summary) => {\n      if (summary.summaryKind === CompileSummaryKind.NgModule) {\n        const /** @type {?} */ moduleMeta = /** @type {?} */(( <CompileNgModuleSummary>summary));\n        moduleMeta.exportedDirectives.concat(moduleMeta.exportedPipes).forEach((id) => {\n          if (!filterFileByPatterns(id.reference.filePath, this.options)) {\n            allSummaries.push(this.resolveSummary(id.reference));\n          }\n        });\n      }\n    });\n\n    return new GeneratedFile(\n        srcFileUrl, summaryFileName(srcFileUrl), JSON.stringify(allSummaries, jsonReplacer));\n  }\n/**\n * @param {?} symbol\n * @return {?}\n */\nprivate _cacheKey(symbol: StaticSymbol) { return `${symbol.filePath}|${symbol.name}`; }\n/**\n * @param {?} staticSymbol\n * @return {?}\n */\nresolveSummary(staticSymbol: StaticSymbol): any {\n    const /** @type {?} */ filePath = staticSymbol.filePath;\n    const /** @type {?} */ name = staticSymbol.name;\n    const /** @type {?} */ cacheKey = this._cacheKey(staticSymbol);\n    if (!filterFileByPatterns(filePath, this.options)) {\n      let /** @type {?} */ summary = this.summaryCache[cacheKey];\n      const /** @type {?} */ summaryFilePath = summaryFileName(filePath);\n      if (!summary) {\n        try {\n          const /** @type {?} */ jsonReviver = (key: string, value: any) => {\n            if (value && value['__symbolic__'] === 'symbol') {\n              // Note: We can't use staticReflector.findDeclaration here:\n              // Summary files can contain symbols of transitive compilation units\n              // (via the providers), and findDeclaration needs .metadata.json / .d.ts files,\n              // but we don't want to depend on these for transitive dependencies.\n              return this.staticReflector.getStaticSymbol(\n                  value['path'], value['name'], value['members']);\n            } else {\n              return value;\n            }\n          };\n          const /** @type {?} */ readSummaries: CompileTypeSummary[] =\n              JSON.parse(this.host.loadSummary(summaryFilePath), jsonReviver);\n          readSummaries.forEach((summary) => {\n            const /** @type {?} */ filePath = summary.type.reference.filePath;\n            this.summaryCache[this._cacheKey(summary.type.reference)] = summary;\n          });\n          summary = this.summaryCache[cacheKey];\n        } catch ( /** @type {?} */e) {\n          console.error(`Error loading summary file ${summaryFilePath}`);\n          throw e;\n        }\n      }\n      if (!summary) {\n        throw new Error(\n            `Could not find the symbol ${name} in the summary file ${summaryFilePath}!`);\n      }\n      return summary;\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction AotSummaryResolver_tsickle_Closure_declarations() {\n /** @type {?} */\nAotSummaryResolver.prototype.summaryCache;\n /** @type {?} */\nAotSummaryResolver.prototype.host;\n /** @type {?} */\nAotSummaryResolver.prototype.staticReflector;\n /** @type {?} */\nAotSummaryResolver.prototype.options;\n}\n\n/**\n * @param {?} fileName\n * @return {?}\n */\nfunction summaryFileName(fileName: string): string {\n  const /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n  return `${fileNameWithoutSuffix}.ngsummary.json`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}